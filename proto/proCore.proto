syntax = "proto3";

package rv.data;

import "effects.proto";
import "graphicsData.proto";
import "input.proto";
import "recording.proto";
import "basicTypes.proto";
import "cue.proto";

message MediaMetadataRequestInfo {
  string file_path = 1;
  float time = 2;
  uint32 width = 3;
  uint32 height = 4;
  repeated rv.data.Effect effects = 5;
  rv.data.Graphics.EdgeInsets crop_insets = 6;
  enum NativeRotationType {
    NATIVE_ROTATION_TYPE_ROTATE_STANDARD = 0;
    NATIVE_ROTATION_TYPE_ROTATE_90 = 90;
    NATIVE_ROTATION_TYPE_ROTATE_180 = 180;
    NATIVE_ROTATION_TYPE_ROTATE_270 = 270;
  }
  NativeRotationType native_rotation = 7;
  bool flipped_horizontally = 8;
  bool flipped_vertically = 9;

}
message MediaMetadataRequestResponse {
  rv.data.MediaMetadataRequestResponse.Metadata metadata = 1;
  rv.data.MediaMetadataRequestResponse.BitmapInfo generated_bitmap_info = 2;

  message Metadata {
    uint32 width = 1;
    uint32 height = 2;
    float fps = 3;
    float duration = 4;
    uint32 number_audio_channels = 5;
    string codec = 6;
    string artist = 7;
    string title = 8;
    float rotation = 9;
    enum ContentType {
      CONTENT_TYPE_UNKNOWN = 0;
      CONTENT_TYPE_AUDIO = 1;
      CONTENT_TYPE_IMAGE = 2;
      CONTENT_TYPE_VIDEO = 3;
    }
    ContentType content_type = 10;

  }
  message BitmapInfo {
    uint32 width = 1;
    uint32 height = 2;

  }
}
message TriggerSource {
  oneof Location {
    rv.data.TriggerSource.Library library_location = 1;
    rv.data.TriggerSource.Playlist playlist_location = 2;
  }


  message Library {
    string path = 1;
    string presentation_name = 2;

  }
  message Playlist {
    rv.data.UUID identifier = 1;
    rv.data.UUID item_identifier = 2;

  }
}
message NetworkIdentifier {
  repeated rv.data.NetworkIdentifier.IndexOrName identifiers = 1;

  message IndexOrName {
    oneof Component {
      int32 index = 1;
      string name = 2;
    }


  }
}
message TriggerOptions {
  enum ContentDestination {
    CONTENT_DESTINATION_GLOBAL = 0;
    CONTENT_DESTINATION_ANNOUNCEMENTS = 1;
  }
  ContentDestination content_destination = 1;
  bool suppress_auto_start_video = 2;
  bool suppress_media_background = 3;
  bool force_retrigger = 4;
  bool reset_chord_chart = 5;
  bool from_playlist_library = 6;
  bool from_timeline = 7;
  bool ignore_analytics = 8;
  double start_position = 9;
  rv.data.TriggerSource trigger_source = 10;
  rv.data.NetworkIdentifier network_identifier = 11;

}
message ControlTransport {
  oneof ControlType {
    rv.data.ControlTransport.PlayControlType play = 1;
    rv.data.ControlTransport.PauseControlType pause = 2;
    rv.data.ControlTransport.RewindControlType rewind = 3;
    rv.data.ControlTransport.FastForwardControlType fastforward = 4;
    rv.data.ControlTransport.SkipBackControlType skip_back = 5;
    rv.data.ControlTransport.SkipForwardControlType skip_forward = 6;
    rv.data.ControlTransport.StepBackControlType step_back = 7;
    rv.data.ControlTransport.StepForwardControlType step_forward = 8;
    rv.data.ControlTransport.GoToStartControlType go_to_start = 9;
    rv.data.ControlTransport.GoToEndControlType go_to_end = 10;
    rv.data.ControlTransport.JumpToTimeControlType jump_to_time = 11;
    rv.data.ControlTransport.JumpToPercentControlType jump_to_percent = 12;
    rv.data.ControlTransport.MarkInPointControlType mark_in = 13;
    rv.data.ControlTransport.MarkOutPointControlType mark_out = 14;
    rv.data.ControlTransport.SetScaleModeControlType set_scale_mode = 15;
    rv.data.ControlTransport.SetFlippedModeControlType set_flipped_mode = 16;
    rv.data.ControlTransport.SetPlayRateControlType set_play_rate = 17;
    rv.data.ControlTransport.SetNativeRotationControlType set_rotation = 18;
    rv.data.ControlTransport.TogglePlaybackControlType toggle_playback = 19;
    rv.data.ControlTransport.SetEffectsControlType set_effects = 20;
    rv.data.ControlTransport.UpdateEffectControlType update_effect = 21;
    rv.data.ControlTransport.BeginScrubControlType begin_scrub = 22;
    rv.data.ControlTransport.EndScrubControlType end_scrub = 23;
    rv.data.ControlTransport.ScrubToTimeControlType scrub_to_time = 24;
    rv.data.ControlTransport.ScrubToPercentControlType scrub_to_percent = 25;
    rv.data.ControlTransport.SetAudioFadeType set_audio_fade = 26;
    rv.data.ControlTransport.SetAudioPropertiesType set_audio_properties = 27;
  }


  message PlayControlType {

  }
  message PauseControlType {

  }
  message RewindControlType {

  }
  message FastForwardControlType {

  }
  message SkipBackControlType {
    double offset = 1;

  }
  message SkipForwardControlType {
    double offset = 1;

  }
  message StepBackControlType {

  }
  message StepForwardControlType {

  }
  message GoToStartControlType {
    double offset = 1;

  }
  message GoToEndControlType {
    double offset = 1;

  }
  message JumpToTimeControlType {
    double time = 1;

  }
  message JumpToPercentControlType {
    double percent = 1;

  }
  message MarkInPointControlType {
    double time = 1;

  }
  message MarkOutPointControlType {
    double time = 1;

  }
  message SetScaleModeControlType {
    enum ScaleBehavior {
      SCALE_BEHAVIOR_FIT = 0;
      SCALE_BEHAVIOR_FILL = 1;
      SCALE_BEHAVIOR_STRETCH = 2;
      SCALE_BEHAVIOR_CUSTOM = 3;
    }
    ScaleBehavior mode = 1;
    enum ScaleAlignment {
      SCALE_ALIGNMENT_MIDDLE_CENTER = 0;
      SCALE_ALIGNMENT_TOP_LEFT = 1;
      SCALE_ALIGNMENT_TOP_CENTER = 2;
      SCALE_ALIGNMENT_TOP_RIGHT = 3;
      SCALE_ALIGNMENT_MIDDLE_RIGHT = 4;
      SCALE_ALIGNMENT_BOTTOM_RIGHT = 5;
      SCALE_ALIGNMENT_BOTTOM_CENTER = 6;
      SCALE_ALIGNMENT_BOTTOM_LEFT = 7;
      SCALE_ALIGNMENT_MIDDLE_LEFT = 8;
    }
    ScaleAlignment alignment = 2;

  }
  message SetFlippedModeControlType {
    bool horizontal = 1;
    bool vertical = 2;

  }
  message SetPlayRateControlType {
    double play_rate = 1;

  }
  message SetNativeRotationControlType {
    enum NativeRotationType {
      NATIVE_ROTATION_TYPE_ROTATE_STANDARD = 0;
      NATIVE_ROTATION_TYPE_ROTATE_90 = 90;
      NATIVE_ROTATION_TYPE_ROTATE_180 = 180;
      NATIVE_ROTATION_TYPE_ROTATE_270 = 270;
    }
    NativeRotationType rotation = 1;

  }
  message TogglePlaybackControlType {

  }
  message SetEffectsControlType {
    repeated rv.data.Effect effects = 1;

  }
  message UpdateEffectControlType {
    rv.data.Effect effect = 1;

  }
  message BeginScrubControlType {
    double time = 1;

  }
  message EndScrubControlType {
    double time = 1;

  }
  message ScrubToTimeControlType {
    double time = 1;

  }
  message ScrubToPercentControlType {
    double percent = 1;

  }
  message SetAudioFadeType {
    double fade_in_duration = 1;
    double fade_out_duration = 2;
    bool should_fade_in = 3;
    bool should_fade_out = 4;

  }
  message SetAudioPropertiesType {
    rv.data.Media.AudioProperties audio_properties = 1;
    repeated bool solo = 2;

  }
}
message AudioInputSettings {
  repeated rv.data.AudioInput inputs = 1;
  double transitionTime = 2;

}
message VideoInputSettings {
  repeated rv.data.VideoInput inputs = 1;

}
message RecordRequest {
  rv.data.Recording.Stream stream = 1;
  rv.data.URL working_directory = 2;
  rv.data.RecordRequest.Resi resi = 3;

  message Resi {
    uint32 gop = 1;
    double segmentSize = 2;
    string destinationGroupId = 3;
    uint32 bufSize = 4;
    uint32 minRate = 5;
    uint32 maxRate = 6;
    string eventName = 7;
    string social_description = 8;

  }
}
message TextSegmentRequest {
  repeated rv.data.TextSegmentRequest.Segment segments = 1;
  double start_position = 2;

  message Segment {
    uint32 index = 1;
    double size = 2;

  }
}
message ProClockSource {
  string uuid = 1;
  string name = 2;
  bool connected = 3;
  bool active = 4;
  enum Type {
    TYPE_UNKOWN = 0;
    TYPE_INPUT = 1;
    TYPE_OUTPUT = 2;
  }
  Type type = 5;

}
message TimedPlayback {
  rv.data.TimedPlayback.Sequence sequence = 1;
  rv.data.TimedPlayback.Timing timing = 2;

  message Sequence {
    repeated rv.data.TimedPlayback.Sequence.SequenceItem sequence = 1;
    enum ContentDestination {
      CONTENT_DESTINATION_GLOBAL = 0;
      CONTENT_DESTINATION_ANNOUNCEMENTS = 1;
    }
    ContentDestination content_destination = 2;

    message SequenceItem {
      rv.data.UUID identifier = 1;
      double time = 2;
      rv.data.TriggerSource trigger_source = 3;
      enum ContentDestination {
        CONTENT_DESTINATION_GLOBAL = 0;
        CONTENT_DESTINATION_ANNOUNCEMENTS = 1;
      }
      ContentDestination content_destination = 4;
      oneof Item {
        rv.data.Cue cue = 5;
        rv.data.Action action = 6;
      }


    }
  }
  message Timing {
    oneof Source {
      rv.data.TimedPlayback.Timing.LayerTransport layer_transport = 1;
      rv.data.TimedPlayback.Timing.SMPTETimecode smpte_timecode = 2;
      rv.data.TimedPlayback.Timing.Internal internal = 3;
    }


    message LayerTransport {
      int32 layer = 1;

    }
    message SMPTETimecode {
      string device_identifier = 1;
      int32 channel = 2;
      enum Format {
        FORMAT_24_FPS = 0;
        FORMAT_25_FPS = 1;
        FORMAT_29_97_FPS = 2;
        FORMAT_30_FPS = 3;
      }
      Format format = 3;

    }
    message Internal {
      double duration = 1;
      bool should_loop = 2;

    }
  }
  message Update {
    oneof ActionType {
      rv.data.TimedPlayback.Update.Play play = 1;
      rv.data.TimedPlayback.Update.Record record = 2;
      rv.data.TimedPlayback.Update.Pause pause = 3;
      rv.data.TimedPlayback.Update.Reset reset = 4;
      rv.data.TimedPlayback.Update.JumpToTime jump_to_time = 5;
      rv.data.TimedPlayback.Update.StartScrub start_scrub = 6;
      rv.data.TimedPlayback.Update.EndScrub end_scrub = 7;
      rv.data.TimedPlayback.Update.Duration duration = 8;
      rv.data.TimedPlayback.Update.Loop loop = 9;
      rv.data.TimedPlayback.Sequence update_sequence = 10;
      rv.data.TimedPlayback.Update.MonitorSource monitor_source = 11;
    }


    message Play {

    }
    message Record {
      bool is_recording = 1;

    }
    message Pause {

    }
    message Reset {

    }
    message JumpToTime {
      double time = 1;

    }
    message StartScrub {
      double time = 1;

    }
    message EndScrub {
      double time = 2;

    }
    message Duration {
      double duration = 1;

    }
    message Loop {
      bool loop = 1;

    }
    message MonitorSource {
      bool enable = 1;

    }
  }
}
message NetworkTriggerDataItem {
  oneof Type {
    rv.data.Action action = 1;
    rv.data.Cue cue = 2;
  }


}
message SlideElementTextRenderInfo {
  repeated rv.data.SlideElementTextRenderInfo.Layer layers = 1;

  message Layer {
    enum LayerType {
      LAYER_TYPE_COMPOSITE = 0;
      LAYER_TYPE_MASK = 1;
      LAYER_TYPE_OVER = 2;
      LAYER_TYPE_UNDER = 3;
    }
    LayerType layer_type = 1;
    int32 text_build_index = 5;
    oneof AdvancedFill {
      rv.data.Graphics.Text.CutOutFill cut_out_fill = 2;
      rv.data.Graphics.Text.MediaFill media_fill = 3;
      rv.data.Graphics.BackgroundEffect background_effect = 4;
    }


  }
}
